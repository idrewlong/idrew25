{"file":"NuxtSeo-h8dLR-n3.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAUA,UAAM,QAAQ;AAad,UAAM,WAAW;AAEjB,UAAM,gBAAgB,wBAAwB;AAExC,UAAA,YAAY,SAAS,MAAM;AACxB,aAAA,MAAM,aAAa,cAAc,mBAAmB;AAAA,IAAA,CAC5D;AAEK,UAAA,WAAW,SAAS,MAAM;AAE1B,UAAA,SAAS,KAAK,MAAM,KAAK;AAC3B,eAAO,MAAM;AAGf,UAAI,SAAS,KAAK,IAAI,MAAM,KAAK,EAAE;AAC1B,eAAA,IAAI,MAAM,KAAK;AAGxB,UAAI,MAAM,MAAM,WAAW,KAAK,GAAG;AAC3B,cAAA,MAAM,MAAM,MACf,QAAQ,QAAQ,EAAE,EAClB,QAAQ,SAAS,EAAE,EACnB,QAAQ,KAAK,EAAE,EACf,MAAM,GAAG,EACT,IAAI,CAAA,MAAK,OAAO,SAAS,EAAE,KAAQ,GAAA,EAAE,CAAC;AACzC,cAAM,MAAM,IACT,IAAI,CAAC,MAAM;AACJA,gBAAAA,OAAM,EAAE,SAAS,EAAE;AACzB,iBAAOA,KAAI,WAAW,IAAI,IAAIA,IAAG,KAAKA;AAAAA,QAAAA,CACvC,EACA,KAAK,EAAE;AACV,eAAO,IAAI,GAAG;AAAA,MAAA;AAET,aAAA;AAAA,IAAA,CACR;AAEK,UAAA,WAAW,SAAS,MAAM;;AAE9B,cAAO,cAAS,MACb,QAAQ,KAAK,EAAE,EACf,MAAM,SAAS,MAFX,mBAGH,IAAI,CAAA,MAAK,OAAO,SAAS,GAAG,EAAE,GAC/B,KAAK;AAAA,IAAI,CACb;AAED,UAAM,aAAa,cAAc;AAC3B,UAAA,WAAW,SAAS,MAAM;AACvB,aAAA,MAAM,YAAY,WAAW;AAAA,IAAA,CACrC;AACK,UAAA,WAAW,SAAS,MAAM;AACvB,aAAA,MAAM,YAAY,WAAW;AAAA,IAAA,CACrC;AAED,UAAM,gBAAgB,cAAc,cAChC,qBACA,gBAAgB;AAAA,MACd,SAAS;AACA,eAAA,EAAE,OAAO,oBAAoB;AAAA,MAAA;AAAA,IACtC,CACD;AACD,QAAA,OAAO,MAAM,SAAS,YAAY,CAAC,cAAc,eAAe,MAAa;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","names":["hex"],"sources":["../../../../node_modules/nuxt-og-image/dist/runtime/app/components/Templates/Community/NuxtSeo.vue"],"sourcesContent":["<script setup lang=\"ts\">\r\n/**\r\n * @credits Nuxt SEO <https://nuxtseo.com/>\r\n */\r\n\r\nimport { useSiteConfig } from '#imports'\r\nimport { useOgImageRuntimeConfig } from '#og-image/shared'\r\nimport { computed, defineComponent, h, resolveComponent } from 'vue'\r\n\r\n// convert to typescript props\r\nconst props = withDefaults(defineProps<{\r\n  colorMode?: 'dark' | 'light'\r\n  title?: string\r\n  description?: string\r\n  icon?: string | boolean\r\n  siteName?: string\r\n  siteLogo?: string\r\n  theme?: string\r\n}>(), {\r\n  theme: '#00dc82',\r\n  title: 'title',\r\n})\r\n\r\nconst HexRegex = /^#(?:[0-9a-f]{3}){1,2}$/i\r\n\r\nconst runtimeConfig = useOgImageRuntimeConfig()\r\n\r\nconst colorMode = computed(() => {\r\n  return props.colorMode || runtimeConfig.colorPreference || 'light'\r\n})\r\n\r\nconst themeHex = computed(() => {\r\n  // regex test if valid hex\r\n  if (HexRegex.test(props.theme))\r\n    return props.theme\r\n\r\n  // if it's hex without the hash, just add the hash\r\n  if (HexRegex.test(`#${props.theme}`))\r\n    return `#${props.theme}`\r\n\r\n  // if it's rgb or rgba, we convert it to hex\r\n  if (props.theme.startsWith('rgb')) {\r\n    const rgb = props.theme\r\n      .replace('rgb(', '')\r\n      .replace('rgba(', '')\r\n      .replace(')', '')\r\n      .split(',')\r\n      .map(v => Number.parseInt(v.trim(), 10))\r\n    const hex = rgb\r\n      .map((v) => {\r\n        const hex = v.toString(16)\r\n        return hex.length === 1 ? `0${hex}` : hex\r\n      })\r\n      .join('')\r\n    return `#${hex}`\r\n  }\r\n  return '#FFFFFF'\r\n})\r\n\r\nconst themeRgb = computed(() => {\r\n  // we want to convert it so it's just `<red>, <green>, <blue>` (255, 255, 255)\r\n  return themeHex.value\r\n    .replace('#', '')\r\n    .match(/.{1,2}/g)\r\n    ?.map(v => Number.parseInt(v, 16))\r\n    .join(', ')\r\n})\r\n\r\nconst siteConfig = useSiteConfig()\r\nconst siteName = computed(() => {\r\n  return props.siteName || siteConfig.name\r\n})\r\nconst siteLogo = computed(() => {\r\n  return props.siteLogo || siteConfig.logo\r\n})\r\n\r\nconst IconComponent = runtimeConfig.hasNuxtIcon\r\n  ? resolveComponent('Icon')\r\n  : defineComponent({\r\n      render() {\r\n        return h('div', 'missing @nuxt/icon')\r\n      },\r\n    })\r\nif (typeof props.icon === 'string' && !runtimeConfig.hasNuxtIcon && process.dev) {\r\n  console.warn('Please install `@nuxt/icon` to use icons with the fallback OG Image component.')\r\n  // eslint-disable-next-line no-console\r\n  console.log('\\nnpx nuxi module add icon\\n')\r\n  // create simple div renderer component\r\n}\r\n</script>\r\n\r\n<template>\r\n  <div\r\n    class=\"w-full h-full flex justify-between relative p-[60px]\"\r\n    :class=\"[\r\n      colorMode === 'light' ? ['bg-white', 'text-gray-900'] : ['bg-gray-900', 'text-white'],\r\n    ]\"\r\n  >\r\n    <div\r\n      class=\"flex absolute top-0 right-[-100%]\" :style=\"{\r\n        width: '200%',\r\n        height: '200%',\r\n        backgroundImage: `radial-gradient(circle, rgba(${themeRgb}, 0.5) 0%,  ${colorMode === 'dark' ? 'rgba(5, 5, 5,0.3)' : 'rgba(255, 255, 255, 0.7)'} 50%, ${props.colorMode === 'dark' ? 'rgba(5, 5, 5,0)' : 'rgba(255, 255, 255, 0)'} 70%)`,\r\n      }\"\r\n    />\r\n    <div class=\"h-full w-full justify-between relative\">\r\n      <div class=\"flex flex-row justify-between items-start\">\r\n        <div class=\"flex flex-col w-full max-w-[65%]\">\r\n          <h1 class=\"m-0 font-bold mb-[30px] text-[75px]\">\r\n            {{ title }}\r\n          </h1>\r\n          <p\r\n            v-if=\"description\" class=\"text-[35px]\" :class=\"[\r\n              colorMode === 'light' ? ['text-gray-700'] : ['text-gray-300'],\r\n            ]\"\r\n          >\r\n            {{ description }}\r\n          </p>\r\n        </div>\r\n        <div v-if=\"Boolean(icon)\" style=\"width: 30%;\" class=\"flex justify-end\">\r\n          <IconComponent :name=\"icon\" size=\"250px\" style=\"margin: 0 auto; opacity: 0.7;\" />\r\n        </div>\r\n      </div>\r\n      <div class=\"flex flex-row justify-center items-center text-left w-full\">\r\n        <img v-if=\"siteLogo\" :src=\"siteLogo\" height=\"30\">\r\n        <template v-else>\r\n          <svg height=\"50\" width=\"50\" class=\"mr-3\" viewBox=\"0 0 200 200\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <path :fill=\"theme.includes('#') ? theme : `#${theme}`\" d=\"M62.3,-53.9C74.4,-34.5,73.5,-9,67.1,13.8C60.6,36.5,48.7,56.5,30.7,66.1C12.7,75.7,-11.4,74.8,-31.6,65.2C-51.8,55.7,-67.9,37.4,-73.8,15.7C-79.6,-6,-75.1,-31.2,-61.1,-51C-47.1,-70.9,-23.6,-85.4,0.8,-86C25.1,-86.7,50.2,-73.4,62.3,-53.9Z\" transform=\"translate(100 100)\" />\r\n          </svg>\r\n          <p v-if=\"siteName\" style=\"font-size: 25px;\" class=\"font-bold\">\r\n            {{ siteName }}\r\n          </p>\r\n        </template>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n"],"version":3}